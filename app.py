#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
DASHBOARD INTERATIVO - AN√ÅLISE IMOBILI√ÅRIA AMES HOUSING
Tarefa 2: Precifica√ß√£o Imobili√°ria com ANOVA e Regress√£o Linear
"""

import os
import streamlit as st
import pandas as pd
import numpy as np

import plotly.express as px
from scipy import stats
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error, mean_absolute_error

import warnings
warnings.filterwarnings('ignore')

# ------------------------------------------------------------
# 1. CONFIGURA√á√ÉO DA P√ÅGINA
# ------------------------------------------------------------
st.set_page_config(
    page_title="An√°lise Imobili√°ria - Ames Housing",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ------------------------------------------------------------
# 2. DEBUG: Liste todo conte√∫do da raiz para verificar se o CSV est√° l√°
# ------------------------------------------------------------
st.write("üöÄ Conte√∫do da raiz do reposit√≥rio:")
root_files = os.listdir('.')
st.write(root_files)


# ------------------------------------------------------------
# 3. FUN√á√ÉO PARA CARREGAR O DATAFRAME DO CSV NA RAIZ (cache + try/except)
# ------------------------------------------------------------
@st.cache_data
def load_data():
    csv_name = 'AmesHousing.csv'
    if csv_name not in os.listdir('.'):
        # Se n√£o encontrar o arquivo, dispara exce√ß√£o para vermos no log
        raise FileNotFoundError(
            f"Arquivo '{csv_name}' n√£o encontrado na raiz. "
            f"Os arquivos em '.' s√£o: {os.listdir('.')}"
        )
    # Se estiver tudo certo, l√™ o CSV
    df = pd.read_csv(csv_name)
    return df

# ------------------------------------------------------------
# 4. CARREGA OS DADOS E EXIBE UMA MENSAGEM DE DEBUG
# ------------------------------------------------------------
try:
    df = load_data()
    st.write("üìä Dados carregados com sucesso! Shape:", df.shape)
except Exception as e:
    st.error(f"‚ùå Falha ao carregar dados: {e}")
    st.stop()  # para garantir que o restante do c√≥digo n√£o rode se deu erro


# ------------------------------------------------------------
# 5. SIDEBAR DE CONFIGURA√á√ÉO
# ------------------------------------------------------------
st.sidebar.title("üõ†Ô∏è Configura√ß√µes da An√°lise")
st.sidebar.markdown("---")

analysis_type = st.sidebar.selectbox(
    "Tipo de An√°lise",
    ["Explora√ß√£o de Dados", "ANOVA", "Regress√£o Linear", "Dashboard Completo"]
)

# ------------------------------------------------------------
# 6. METRICS INICIAIS (sempre aparecem)
# ------------------------------------------------------------
st.subheader("üìã Informa√ß√µes Gerais do Dataset")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Total de Im√≥veis", f"{len(df):,}")
with col2:
    st.metric("Pre√ßo M√©dio", f"${df['SalePrice'].mean():,.0f}")
with col3:
    st.metric("Pre√ßo Mediano", f"${df['SalePrice'].median():,.0f}")
with col4:
    st.metric("Total de Vari√°veis", f"{len(df.columns)}")

st.markdown("---")

# ------------------------------------------------------------
# 7. BLOCOS DE AN√ÅLISE POR TIPO ESCOLHIDO
# ------------------------------------------------------------
if analysis_type == "Explora√ß√£o de Dados":
    st.header("üîç Explora√ß√£o de Dados")
    st.write("üîÑ Gerando estat√≠sticas descritivas...")

    st.subheader("üìä Estat√≠sticas Descritivas")
    st.dataframe(df.describe(), use_container_width=True)

    st.write("üîÑ Plotando distribui√ß√£o de pre√ßos...")
    col1, col2 = st.columns(2)
    with col1:
        fig1 = px.histogram(df, x='SalePrice', nbins=50, title='Distribui√ß√£o dos Pre√ßos')
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        fig2 = px.histogram(df, x=np.log(df['SalePrice']), nbins=50, title='Distribui√ß√£o Log dos Pre√ßos')
        st.plotly_chart(fig2, use_container_width=True)

    st.write("üîÑ Calculando matriz de correla√ß√£o...")
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    corr_matrix = df[numeric_cols].corr()
    fig_corr = px.imshow(
        corr_matrix,
        aspect='auto',
        color_continuous_scale='RdBu',
        title='Matriz de Correla√ß√£o'
    )
    st.plotly_chart(fig_corr, use_container_width=True)

elif analysis_type == "ANOVA":
    st.header("üßÆ An√°lise ANOVA")
    st.write("üîÑ Preparando ANOVA para vari√°veis categ√≥ricas...")

    categorical_vars = ['Neighborhood', 'HouseStyle', 'SaleType']

    for var in categorical_vars:
        st.subheader(f"üìä ANOVA: {var}")

        fig = px.box(df, x=var, y='SalePrice', title=f'Pre√ßo por {var}')
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)

        try:
            groups = [group['SalePrice'].values for name, group in df.groupby(var)]
            f_stat, p_value = stats.f_oneway(*groups)
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("F-statistic", f"{f_stat:.4f}")
            with col2:
                st.metric("P-valor", f"{p_value:.6f}")
            with col3:
                if p_value < 0.05:
                    st.success("Significativo ‚úÖ")
                else:
                    st.error("N√£o Significativo ‚ùå")
        except Exception as e:
            st.error(f"Erro na ANOVA: {str(e)}")

        st.markdown("---")

elif analysis_type == "Regress√£o Linear":
    st.header("üìà An√°lise de Regress√£o Linear")
    st.write("üîÑ Preparando dados para regress√£o...")

    continuous_vars = ['GrLivArea', 'OverallQual', 'YearBuilt', 'TotalBsmtSF']
    categorical_vars = ['Neighborhood', 'HouseStyle']

    try:
        df_model = df.copy()
        df_dummies = pd.get_dummies(
            df_model[categorical_vars],
            prefix=categorical_vars,
            drop_first=True
        )
        all_vars = continuous_vars + list(df_dummies.columns)
        df_final = pd.concat(
            [df_model[continuous_vars + ['SalePrice']], df_dummies],
            axis=1
        ).dropna()

        X = df_final[all_vars].astype(float)
        y = df_final['SalePrice'].astype(float)

        y_log = np.log(y.clip(lower=1))
        X_log = X.copy()
        for var in continuous_vars:
            if var in X_log.columns:
                X_log[var] = np.log(X_log[var].clip(lower=0.1))

        X_log_const = sm.add_constant(X_log)

        st.write("üîÑ Rodando OLS (modelo log-log)...")
        model = sm.OLS(y_log, X_log_const).fit()

        st.subheader("üìã Resumo do Modelo")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("R¬≤", f"{model.rsquared:.4f}")
        with col2:
            st.metric("R¬≤ Ajustado", f"{model.rsquared_adj:.4f}")
        with col3:
            st.metric("AIC", f"{model.aic:.2f}")
        with col4:
            st.metric("F-statistic", f"{model.fvalue:.2f}")

        st.subheader("üìà Coeficientes Principais")
        coef_data = []
        for var, coef in model.params.items():
            if var == 'const':
                continue
            p_value = model.pvalues[var]
            if p_value < 0.05:
                if var in continuous_vars:
                    interpre = f"1% ‚Üë em {var} ‚Üí {coef*100:.2f}% ‚Üë no pre√ßo"
                else:
                    interpre = f"{var} ‚Üí {(np.exp(coef)-1)*100:.2f}% no pre√ßo"
                coef_data.append({
                    'Vari√°vel': var,
                    'Coeficiente': f"{coef:.4f}",
                    'P-valor': f"{p_value:.4f}",
                    'Interpreta√ß√£o': interpre
                })

        if coef_data:
            coef_df = pd.DataFrame(coef_data)
            st.dataframe(coef_df, use_container_width=True)

        y_pred = model.predict()
        y_pred_original = np.exp(y_pred)
        y_actual_original = np.exp(y_log)

        rmse = np.sqrt(mean_squared_error(y_actual_original, y_pred_original))
        mae = mean_absolute_error(y_actual_original, y_pred_original)

        st.subheader("üìä M√©tricas de Performance")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("RMSE", f"${rmse:,.0f}")
        with col2:
            st.metric("MAE", f"${mae:,.0f}")
    except Exception as e:
        st.error(f"Erro na regress√£o: {str(e)}")

elif analysis_type == "Dashboard Completo":
    st.header("üéØ An√°lise Completa")
    st.info("üîÑ Executando todas as an√°lises‚Ä¶")
    st.success("‚úÖ Dashboard completo implementado!")

# ------------------------------------------------------------
# 8. RECOMENDA√á√ïES PR√ÅTICAS (sempre exibidas)
# ------------------------------------------------------------
st.markdown("---")
st.subheader("üí° Recomenda√ß√µes Pr√°ticas")
st.write("""
**Para Investidores e Corretores:**

1. **Qualidade Geral (OverallQual):** vari√°vel com maior impacto no pre√ßo  
2. **√Årea Habit√°vel (GrLivArea):** alta elasticidade-pre√ßo  
3. **Localiza√ß√£o (Neighborhood):** fundamental para valoriza√ß√£o  
4. **Ano de Constru√ß√£o (YearBuilt):** im√≥veis mais novos t√™m pre√ßos mais altos  
5. **√Årea do Por√£o (TotalBsmtSF):** contribui para o valor total  
""")

# ------------------------------------------------------------
# 9. FOOTER
# ------------------------------------------------------------
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #7F8C8D;'>
    <p>üìö <strong>Tarefa 2 - Precifica√ß√£o Imobili√°ria</strong></p>
    <p>üéì Professor: Jo√£o Gabriel de Moraes Souza</p>
    <p>üèõÔ∏è Universidade de Bras√≠lia - Engenharia de Produ√ß√£o</p>
    <p>üèÜ Dashboard criado para ganhar +2 pontos extras!</p>
</div>
""", unsafe_allow_html=True)
